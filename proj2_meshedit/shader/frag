uniform int outputID;
uniform sampler2D envmap;
uniform vec3 eyePos;
varying vec3 normal;
varying vec3 vertex;

#define PI 3.1415926

vec3 shadeDiffuseFromEye();

vec3 shadePhong(vec3 lightPos);

vec3 shadeEnvmapReflection();

void main()
{
    if(outputID == 0)
    {
        gl_FragColor = vec4(shadeDiffuseFromEye(), 1.0);
        return;
    }
    if(outputID == 1)
    {
        gl_FragColor = vec4(shadePhong(vec3(10, 10, 10)), 1.0);
        return;
    }
    if(outputID == 2)
    {
        // Do something interesting here for extra credit.
        // gl_FragColor = vec4(???, 1.0);
        // return;
         gl_FragColor = vec4(shadeEnvmapReflection(), 1.0);
        return;
    }
}

vec3 shadeDiffuseFromEye()
{
    vec3 n = normalize(normal);
    vec3 out_vec = normalize(eyePos - vertex);
    float diffuse = abs(dot(out_vec, n));
    return vec3(diffuse);
}

vec3 shadePhong(vec3 lightPos)
{
    // TODO Part 7.
    // TODO Compute Phong shading here. You can choose any color you like. But make
    // TODO sure that you have noticeable specular highlights in the shading.
    // TODO Variables to use: eyePos, lightPos, normal, vertex

    vec3 l = normalize(lightPos - vertex);
    vec3 v = normalize(eyePos - vertex);
    vec3 h = normalize(v+l);
    vec3 n = normalize(normal);  
    vec3 ambient = vec3(0.1,0.1,0.1);
    vec3 diffuse = vec3(102./255.,34./255.,0.)*max(0.0,dot(n,l));
   
    vec3 specular = vec3(227.5/255.,(161.5/255.),127.5/255.)*pow(max(dot(n,h),0.0),32.0);
 
    return specular+ambient+diffuse;
}

 
vec3 shadeEnvmapReflection(){


   vec3 n =normalize(normal);
   vec3 i = normalize(eyePos - vertex);
   vec3 r = normalize(2.0*dot(i,n)*n - i);


   float length = length(r);
   float phi = acos(r.z/length);
   float theta = atan(r.y/r.x);

   float u = theta/(2.*PI);
   float v = phi/PI;

    return vec3(texture2D(envmap,vec2(u,v)));

}

   
    
    
